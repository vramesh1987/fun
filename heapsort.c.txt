#include <stdio.h>

void siftDown(int **a, int start, int end)
{
	int root = start;
	int child, temp;
    while((root*2+1) <= end)
    {
      child = root*2 + 1;           
      if((child+1<=end) && ((*a)[child]<(*a)[child+1]))
      {
         child = child + 1;
      }
      if((*a)[root] < (*a)[child])
      {
         temp = (*a)[root];
         (*a)[root] = (*a)[child];
         (*a)[child] = temp;
         root = child;          
      }
      else
         return;
    }
}

void heapsort(int **a, int num)
{
	int temp, end;
	heapify(a, num);
	
	end = num - 1;
	while(end>0)
	{
		temp = (*a)[end];
		(*a)[end] = (*a)[0]; 
		(*a)[0] = temp;
		end = end - 1;
		siftDown(a, 0, end);
	}
}

void heapify(int **a, int num)
{
	int start = (num - 2)/2;
	
	while(start>=0)
	{
		siftDown(a, start, num-1);
		start = start - 1;
	}
}



int main(void) {
	int i, num, *a;
	scanf("%d", &num);
	a = (int *)malloc(num * sizeof(int));
	for(i=0;i<num;i++)
	{
		scanf("%d ", &a[i]);
	}
	heapsort(&a, num);
	for(i=0;i<num;i++)
	{
		printf("%d ", a[i]);
	}
	return 0;
}